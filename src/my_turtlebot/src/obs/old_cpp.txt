#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include <std_msgs/Float64.h>

using namespace std;
ros::Publisher velocity_publisher;

void move(double speed, double distance, bool isForward);

int main(int argc, char **argv) {

    ros::init(argc, argv, "turtlebot_move");
    ros::NodeHandle n;
    double speed;
    double distance;
    bool isForward;

    velocity_publisher = n.advertise<geometry_msgs::Twist>("/cmd_vel",5);

    ROS_INFO("****TEST***\n");
    // ros::Rate loop_rate(0.5);
    move(0.1,1.0,1);

    // ros::spin();

    return 0; 
}

void move(double speed, double distance, bool isForward) {
    geometry_msgs::Twist vel_msg;

    if (isForward)
        vel_msg.linear.x = abs(speed);
    else 
        vel_msg.linear.x = -abs(speed);
    vel_msg.linear.y = 0;
    vel_msg.linear.z = 0;

    vel_msg.angular.x = 0;
    vel_msg.angular.y = 0;
    vel_msg.angular.z = 0;

    double t0 = ros::Time::now().toSec();
    double current_distance = 0.0;
    ros::Rate loop_rate(100);

    do {
        ROS_INFO(" speed request : %1.2f", vel_msg.linear.x);
        velocity_publisher.publish(vel_msg);
        double t1 = ros::Time::now().toSec();
        current_distance = speed * (t1-t0);
        ros::spinOnce();
        loop_rate.sleep();
    }while(current_distance < distance);
    vel_msg.linear.x = 0;
    velocity_publisher.publish(vel_msg);

}
